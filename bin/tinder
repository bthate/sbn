#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0115,C0116,C0413,E0401,R0903


"created clients"


import os
import random
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


from sbn.brokers import Broker
from sbn.clients import Client, command, mods, parse
from sbn.objects import Object
from sbn.runtime import Cfg, scan, wrap
from sbn.storage import Storage
from sbn.threads import laps, launch


from sbn import modules


DATE = time.ctime(time.time()).replace("  ", " ")
STARTTIME = time.time()


Cfg.debug = True
Cfg.mod = ",".join(mods(modules.__path__[0]))
Cfg.name = "tinder"
Cfg.silent = False
Cfg.skip = ["debug",]


Storage.workdir = ".test"


paylock = _thread.allocate_lock()
outlock = _thread.allocate_lock()


errors = []
events = []


param = Object()
param.cfg = ["server=localhost", ""]
param.cmd = [""]
param.dlt = ["~bart@127.0.0.1"]
param.dne = ["test4", ""]
param.dpl = ["reddit title,summary,link", ""]
param.err = [""]
param.flt = ["", "0"]
param.rem = ["reddit", ""]
param.fnd = [
             'log',
             "cfg",
             "tdo",
             "rss",
             "tdo txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.met = ["~bart@127.0.0.1"]
param.mod = [""]
param.nme = ["reddit reddit"]
param.pwd = ["bla bla"]
param.rem = ["reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.shp = ["bread", "butter", "cheese"]
param.tdo = ["test4", ""]
param.thr = [""]


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        Broker.add(self)

    def raw(self, txt):
        with outlock:
            if txt and "v" in Cfg.opts:
                print(txt.rstrip())


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        if not evt.result:
            print(f"no result for {evt.cmd}")
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt) -> None:
    cmds = list(Client.cmds.keys())
    random.shuffle(cmds)
    with paylock:
        nmr = 0
        for cmnd in cmds:
            for ex in getattr(param, cmnd, [""]):
                evt = clt.event(cmnd + " " + ex)
                command(evt)
                events.append(evt)
                nmr += 1
        return nmr


def main() -> None:
    if os.path.exists(Storage.workdir):
        shutil.rmtree(Storage.workdir)
    parse(Cfg, " ".join(sys.argv[1:]))
    scan(modules, Cfg.mod.split(","), False, True)
    if "v" in Cfg.opts:
        Client.output = print
    nrs = Cfg.index or 1
    cli = CLI()
    #launch(cli.loop)
    waiters = []
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=_nr))
    result = 1
    for wtr in waiters:
        result += wtr.join() or 1
    consume(events)
    endtime = time.time()
    lap = laps(endtime - STARTTIME)
    percall = (endtime - STARTTIME)/result
    print(f"{lap} {result} {percall}")


if __name__ == "__main__":
    wrap(main)
